generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Enums
enum ConversationEstado {
  pendiente
  respondido
  en_proceso
  requiere_agente
  cerrado
}

enum MessageFrom {
  client
  bot
  agent
}

enum Rol {
  admin
  agente
  invitado
}

enum Plan {
  gratis
  pro
}

enum Estado {
  inactivo
  activo
  suspendido
}

enum MediaType {
  image
  video
  audio
  document
}

enum BusinessType {
  servicios
  productos
}

// ‚úÖ NUEVO: proveedor de almacenamiento
enum StorageProvider {
  local // /uploads/...
  s3 // S3 / Wasabi / Spaces
  r2 // Cloudflare R2
  external // cualquier URL externa
  cloudflare_image
}

model Usuario {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  rol       Rol
  empresaId Int
  empresa   Empresa  @relation(fields: [empresaId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("usuario")
}

model Empresa {
  id     Int    @id @default(autoincrement())
  nombre String
  plan   Plan   @default(gratis)
  estado Estado @default(inactivo)

  trialStart        DateTime?
  trialEnd          DateTime?
  conversationsUsed Int       @default(0)

  usuarios Usuario[]

  configuracion    BusinessConfig?
  conversaciones   Conversation[]
  cuentaWhatsapp   WhatsappAccount?
  messageTemplates MessageTemplate[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Message   Message[]
  Product   Product[]

  @@map("empresa")
}

model Message {
  id             Int         @id @default(autoincrement())
  conversationId Int
  from           MessageFrom
  contenido      String      @db.Text
  timestamp      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt

  // Cloud API
  externalId String?    @unique
  mediaType  MediaType?
  mediaId    String?    @db.VarChar(128)
  mediaUrl   String?    @db.Text
  mimeType   String?    @db.VarChar(64)
  caption    String?    @db.Text

  // üîä Notas de voz
  isVoiceNote   Boolean? @default(false)
  durationSec   Int?
  transcription String?  @db.Text

  empresaId Int
  empresa   Empresa @relation(fields: [empresaId], references: [id])

  Conversation Conversation @relation(fields: [conversationId], references: [id])

  @@index([conversationId, timestamp])
  @@index([empresaId, conversationId, timestamp])
  @@index([mediaId])
  @@index([empresaId, externalId])
  @@map("message")
}

model Conversation {
  id        Int                @id @default(autoincrement())
  phone     String
  nombre    String?
  estado    ConversationEstado @default(pendiente)
  mensajes  Message[]
  createdAt DateTime           @default(now())

  empresaId Int
  empresa   Empresa @relation(fields: [empresaId], references: [id])

  @@map("conversation")
}

model BusinessConfig {
  id        Int @id @default(autoincrement())
  empresaId Int @unique

  // Identidad y contexto
  nombre       String       @default("")
  descripcion  String       @default("")
  businessType BusinessType @default(servicios)

  // Texto libre para ‚Äúservicios / qu√© vendemos‚Äù
  servicios String @default("")

  // Preguntas frecuentes (bloque grande de texto formateado P:/R:)
  faq String @default("")

  // Horario mostrable
  horarios String @default("")

  // ‚ö†Ô∏è Disclaimers legales y notas generales
  disclaimers String @default("")

  // ===== Campos nuevos (coinciden con tu formulario) =====
  // Env√≠os
  enviosInfo           String  @default("") // cobertura, tiempos, empresa de mensajer√≠a, costos
  metodosPago          String  @default("") // tarjeta, d√©bito, transferencia, contraentrega...
  tiendaFisica         Boolean @default(false)
  direccionTienda      String  @default("") // si tiendaFisica=true
  politicasDevolucion  String  @default("") // cambios/devoluciones, plazos
  politicasGarantia    String  @default("") // si aplica
  promocionesInfo      String  @default("") // temporadas, condiciones
  canalesAtencion      String  @default("") // ‚ÄúWhatsApp, correo, horario extendido‚Ä¶‚Äù
  palabrasClaveNegocio String  @default("") // coma-separado para ‚Äútopic locking‚Äù (ej: serum, protector, hidratante)

  // üîΩ Reglas de escalamiento
  escalarSiNoConfia    Boolean @default(true)
  escalarPalabrasClave String  @default("") // coma-separado
  escalarPorReintentos Int     @default(0) // 0 = desactivado

  // Futuro/extra: JSON flexible para flags o configuraciones
  extras Json?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Empresa Empresa @relation(fields: [empresaId], references: [id], onDelete: Cascade)

  @@map("businessconfig")
}

model WhatsappAccount {
  id                 Int      @id @default(autoincrement())
  phoneNumberId      String   @unique @db.VarChar(64)
  wabaId             String   @db.VarChar(64)
  businessId         String?  @db.VarChar(64)
  accessToken        String   @db.Text
  displayPhoneNumber String?  @db.VarChar(32)
  empresaId          Int      @unique
  empresa            Empresa  @relation(fields: [empresaId], references: [id])
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  @@index([wabaId])
  @@map("whatsappaccount")
}

model MessageTemplate {
  id        Int      @id @default(autoincrement())
  nombre    String   @db.VarChar(100)
  idioma    String   @db.VarChar(10)
  categoria String   @db.VarChar(50)
  cuerpo    String   @db.Text
  estado    String   @default("pendiente")
  variables Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  empresaId Int
  empresa   Empresa @relation(fields: [empresaId], references: [id])

  @@unique([empresaId, nombre, idioma])
  @@map("messagetemplate")
}

model Product {
  id              Int      @id @default(autoincrement())
  empresaId       Int
  slug            String   @unique
  nombre          String
  descripcion     String   @default("")
  beneficios      String   @default("") // bullets \n
  caracteristicas String   @default("") // bullets \n
  precioDesde     Decimal?
  disponible      Boolean  @default(true)
  updatedAt       DateTime @updatedAt
  createdAt       DateTime @default(now())

  imagenes ProductImage[]
  empresa  Empresa        @relation(fields: [empresaId], references: [id])

  @@index([empresaId, nombre])
  @@map("product")
}

// ‚úÖ Recomendado: URL como VARCHAR grande con default ""
model ProductImage {
  id        Int @id @default(autoincrement())
  productId Int

  // Cloudflare Images
  imageId   String          @db.VarChar(128) // <- NUEVO: ID de Images (requerido)
  url       String          @default("") @db.VarChar(2048)
  alt       String          @default("")
  provider  StorageProvider @default(external) // cambia a 'external' o crea 'cloudflare_images' si prefieres
  isPrimary Boolean         @default(false)
  sortOrder Int             @default(0)

  // Puedes dejar estos como opcionales (no romper√°n nada, simplemente no se llenar√°n)
  objectKey       String?   @db.VarChar(255)
  mimeType        String?   @db.VarChar(64)
  sizeBytes       Int?
  width           Int?
  height          Int?
  whatsappMediaId String?   @db.VarChar(128)
  mediaCachedAt   DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
  @@index([provider, objectKey])
  @@index([whatsappMediaId])
  @@map("productimage")
}
