generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

/**
 * ========== Enums ==========
 */
/// Perfil general de la IA por empresa
enum AiMode {
  ecommerce
  agente
}

/// Especialidad del agente (expandible)
enum AgentSpecialty {
  generico
  medico
  dermatologia
  nutricion
  psicologia
  odontologia
}

enum ConversationEstado {
  pendiente
  respondido
  en_proceso
  requiere_agente
  venta_en_proceso // NUEVO
  venta_realizada // NUEVO
  cerrado
}

enum MessageFrom {
  client
  bot
  agent
}

enum Rol {
  admin
  agente
  invitado
}

enum Plan {
  gratis
  pro
}

enum Estado {
  inactivo
  activo
  suspendido
}

enum MediaType {
  image
  video
  audio
  document
}

enum BusinessType {
  servicios
  productos
}

// proveedor de almacenamiento
enum StorageProvider {
  local
  s3
  r2
  external
  cloudflare_image
}

/**
 * ========== Modelos base ==========
 */
model Usuario {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  rol       Rol
  empresaId Int
  empresa   Empresa  @relation(fields: [empresaId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("usuario")
}

model Empresa {
  id     Int    @id @default(autoincrement())
  nombre String
  plan   Plan   @default(gratis)
  estado Estado @default(inactivo)

  trialStart        DateTime?
  trialEnd          DateTime?
  conversationsUsed Int       @default(0)

  usuarios Usuario[]

  configuracion    BusinessConfig?
  conversaciones   Conversation[]
  cuentaWhatsapp   WhatsappAccount?
  messageTemplates MessageTemplate[]

  orders Order[] // NUEVO: pedidos asociados

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Message   Message[]
  Product   Product[]

  @@map("empresa")
}

model Message {
  id             Int         @id @default(autoincrement())
  conversationId Int
  from           MessageFrom
  contenido      String      @db.Text
  timestamp      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt

  // Cloud API
  externalId String?    @unique
  mediaType  MediaType?
  mediaId    String?    @db.VarChar(128)
  mediaUrl   String?    @db.Text
  mimeType   String?    @db.VarChar(64)
  caption    String?    @db.Text

  // üîä Notas de voz
  isVoiceNote   Boolean? @default(false)
  durationSec   Int?
  transcription String?  @db.Text

  empresaId Int
  empresa   Empresa @relation(fields: [empresaId], references: [id])

  Conversation Conversation @relation(fields: [conversationId], references: [id])

  paymentReceipts PaymentReceipt[] // comprobantes que apuntan a este mensaje (opcional)

  @@index([conversationId, timestamp])
  @@index([empresaId, conversationId, timestamp])
  @@index([mediaId])
  @@index([empresaId, externalId])
  @@map("message")
}

model Conversation {
  id        Int                @id @default(autoincrement())
  phone     String
  nombre    String?
  estado    ConversationEstado @default(pendiente)
  mensajes  Message[]
  createdAt DateTime           @default(now())

  empresaId Int
  empresa   Empresa @relation(fields: [empresaId], references: [id])

  orders Order[] // pedidos creados desde esta conversaci√≥n

  @@map("conversation")
}

model BusinessConfig {
  id           Int          @id @default(autoincrement())
  empresaId    Int          @unique
  nombre       String       @default("")
  // üîΩ Hacemos opcionales los TEXT que antes eran requeridos
  descripcion  String?      @db.Text
  servicios    String?      @db.Text
  faq          String?      @db.Text
  horarios     String?      @db.Text
  businessType BusinessType @default(servicios)
  disclaimers  String?      @db.Text

  // ===== Operaci√≥n del negocio
  enviosInfo           String? @db.Text
  metodosPago          String? @db.Text
  tiendaFisica         Boolean @default(false)
  direccionTienda      String  @default("")
  politicasDevolucion  String? @db.Text
  politicasGarantia    String? @db.Text
  promocionesInfo      String? @db.Text
  canalesAtencion      String? @db.Text
  extras               String? @db.Text
  palabrasClaveNegocio String  @default("")

  // ===== Perfil de IA (personalizado)
  aiMode           AiMode         @default(ecommerce) // ecommerce | agente
  agentSpecialty   AgentSpecialty @default(generico) // m√©dico, dermatolog√≠a, nutrici√≥n, etc.
  agentPrompt      String?        @db.Text // tono/instrucciones espec√≠ficas del negocio
  agentScope       String?        @db.Text // qu√© atiende / qu√© no atiende
  agentDisclaimers String?        @db.Text // descargos de responsabilidad

  // ===== Pagos (link OPCIONAL + transferencia)
  pagoLinkGenerico     String  @default("") // opcional
  pagoLinkProductoBase String  @default("") // opcional (para SKU/qty)
  pagoNotas            String? @db.Text // instrucciones/ref. (TEXT opcional)

  bancoNombre        String @default("") // transferencia
  bancoTitular       String @default("")
  bancoTipoCuenta    String @default("") // Ahorros/Corriente
  bancoNumeroCuenta  String @default("") // puedes enmascarar
  bancoDocumento     String @default("") // NIT/CC
  transferenciaQRUrl String @default("") // opcional

  // ===== Env√≠os
  envioTipo            String   @default("") // transportadora
  envioEntregaEstimado String   @default("") // ‚Äú2‚Äì5 d√≠as h√°biles‚Äù
  envioCostoFijo       Decimal? // tarifa plana opcional
  envioGratisDesde     Decimal? // umbral env√≠o gratis

  // ===== Post-venta
  facturaElectronicaInfo  String @default("") // c√≥mo la solicitan
  soporteDevolucionesInfo String @default("")

  // Escalamiento
  escalarSiNoConfia    Boolean @default(true)
  escalarPalabrasClave String  @default("") // coma-separado
  escalarPorReintentos Int     @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Empresa Empresa @relation(fields: [empresaId], references: [id], onDelete: Cascade)

  @@map("businessconfig")
}

model WhatsappAccount {
  id                 Int      @id @default(autoincrement())
  phoneNumberId      String   @unique @db.VarChar(64)
  wabaId             String   @db.VarChar(64)
  businessId         String?  @db.VarChar(64)
  accessToken        String   @db.Text
  displayPhoneNumber String?  @db.VarChar(32)
  empresaId          Int      @unique
  empresa            Empresa  @relation(fields: [empresaId], references: [id])
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  @@index([wabaId])
  @@map("whatsappaccount")
}

model MessageTemplate {
  id        Int      @id @default(autoincrement())
  nombre    String   @db.VarChar(100)
  idioma    String   @db.VarChar(10)
  categoria String   @db.VarChar(50)
  cuerpo    String   @db.Text
  estado    String   @default("pendiente")
  variables Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  empresaId Int
  empresa   Empresa @relation(fields: [empresaId], references: [id])

  @@unique([empresaId, nombre, idioma])
  @@map("messagetemplate")
}

model Product {
  id              Int      @id @default(autoincrement())
  empresaId       Int
  slug            String   @unique
  nombre          String
  descripcion     String   @default("")
  beneficios      String   @default("") // bullets \n
  caracteristicas String   @default("") // bullets \n
  precioDesde     Decimal?
  disponible      Boolean  @default(true)
  updatedAt       DateTime @updatedAt
  createdAt       DateTime @default(now())

  imagenes  ProductImage[]
  empresa   Empresa        @relation(fields: [empresaId], references: [id])
  OrderItem OrderItem[]

  @@index([empresaId, nombre])
  @@map("product")
}

model ProductImage {
  id        Int @id @default(autoincrement())
  productId Int

  imageId   String          @db.VarChar(128)
  url       String          @default("") @db.VarChar(2048)
  alt       String          @default("")
  provider  StorageProvider @default(external)
  isPrimary Boolean         @default(false)
  sortOrder Int             @default(0)

  objectKey       String?   @db.VarChar(255)
  mimeType        String?   @db.VarChar(64)
  sizeBytes       Int?
  width           Int?
  height          Int?
  whatsappMediaId String?   @db.VarChar(128)
  mediaCachedAt   DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
  @@index([provider, objectKey])
  @@index([whatsappMediaId])
  @@map("productimage")
}

/**
 * ========== Pedidos & Pagos ==========
 */
model Order {
  id             Int     @id @default(autoincrement())
  empresaId      Int
  conversationId Int
  customerPhone  String
  customerName   String?
  city           String?
  address        String?
  status         String  @default("pending") // pending|paid|shipped|delivered|canceled
  subtotal       Decimal @default(0)
  shippingCost   Decimal @default(0)
  total          Decimal @default(0)
  notes          String  @db.Text // TEXT sin default

  items    OrderItem[]
  payments PaymentReceipt[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  empresa      Empresa      @relation(fields: [empresaId], references: [id])
  Conversation Conversation @relation(fields: [conversationId], references: [id])

  @@index([empresaId, conversationId, status])
  @@map("order")
}

model OrderItem {
  id        Int     @id @default(autoincrement())
  orderId   Int
  productId Int
  name      String
  price     Decimal @default(0)
  qty       Int     @default(1)
  total     Decimal @default(0)

  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@map("orderitem")
}

model PaymentReceipt {
  id         Int       @id @default(autoincrement())
  orderId    Int
  messageId  Int? // WhatsApp Message.id que trajo la imagen (opcional)
  imageUrl   String    @default("")
  amount     Decimal?
  reference  String    @default("")
  method     String    @default("") // link|transfer|qr
  isVerified Boolean   @default(false)
  verifiedAt DateTime?
  rawOcrText String    @db.Text // TEXT sin default

  order   Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  message Message? @relation(fields: [messageId], references: [id])

  createdAt DateTime @default(now())

  @@index([orderId, isVerified])
  @@map("paymentreceipt")
}
