generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

/**
 * ========== Enums ==========
 */
/// Perfil general de la IA por empresa
enum AiMode {
  ecommerce
  agente
  estetica
  appts
}

/// Especialidad del agente (expandible)
enum AgentSpecialty {
  generico
  medico
  dermatologia
  nutricion
  psicologia
  odontologia
}

enum ConversationEstado {
  pendiente
  respondido
  en_proceso
  requiere_agente
  venta_en_proceso // NUEVO
  venta_realizada // NUEVO
  cerrado
}

enum MessageFrom {
  client
  bot
  agent
}

enum Rol {
  admin
  agente
  invitado
}

enum Plan {
  gratis
  pro
}

enum Estado {
  inactivo
  activo
  suspendido
}

enum MediaType {
  image
  video
  audio
  document
}

enum BusinessType {
  servicios
  productos
}

// proveedor de almacenamiento
enum StorageProvider {
  local
  s3
  r2
  external
  cloudflare_image
}

enum AppointmentStatus {
  pending
  confirmed
  rescheduled
  cancelled
  completed
  no_show
}

enum AppointmentSource {
  ai
  agent
  client
}

enum AppointmentVertical {
  none
  salud // odontolog√≠a, est√©tica, nutrici√≥n, etc.
  bienestar // spa, peluquer√≠a, barber√≠a
  automotriz // taller, mantenimiento
  veterinaria
  fitness // gimnasios, entrenadores
  otros
  odontologica // Cl√≠nica Odontol√≥gica
  estetica // Cl√≠nica Est√©tica
  spa // Spa
  custom
}

enum Weekday {
  mon
  tue
  wed
  thu
  fri
  sat
  sun
}

/// NUEVO: rol del staff (opcional)
enum StaffRole {
  profesional
  esteticista
  medico
}

/**
 * ========== Modelos base ==========
 */
model Usuario {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  rol       Rol
  empresaId Int
  empresa   Empresa  @relation(fields: [empresaId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("usuario")
}

model Empresa {
  id     Int    @id @default(autoincrement())
  nombre String
  plan   Plan   @default(gratis)
  estado Estado @default(inactivo)

  trialStart        DateTime?
  trialEnd          DateTime?
  conversationsUsed Int       @default(0)

  usuarios Usuario[]

  configuracion    BusinessConfig?
  conversaciones   Conversation[]
  cuentaWhatsapp   WhatsappAccount?
  messageTemplates MessageTemplate[]

  orders Order[] // pedidos asociados

  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  Message              Message[]
  Product              Product[]
  Appointment          Appointment[]
  AppointmentHour      AppointmentHour[]
  BusinessConfigAppt   BusinessConfigAppt?
  EsteticaProcedure    EsteticaProcedure[]
  ReminderRule         ReminderRule[]
  Staff                Staff[] // NUEVO
  AppointmentException AppointmentException[] // NUEVO

  @@map("empresa")
}

model Message {
  id             Int         @id @default(autoincrement())
  conversationId Int
  from           MessageFrom
  contenido      String      @db.Text
  timestamp      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt

  // Cloud API
  externalId String?    @unique
  mediaType  MediaType?
  mediaId    String?    @db.VarChar(128)
  mediaUrl   String?    @db.Text
  mimeType   String?    @db.VarChar(64)
  caption    String?    @db.Text

  // üîä Notas de voz
  isVoiceNote   Boolean? @default(false)
  durationSec   Int?
  transcription String?  @db.Text

  empresaId Int
  empresa   Empresa @relation(fields: [empresaId], references: [id])

  Conversation Conversation @relation(fields: [conversationId], references: [id])

  paymentReceipts PaymentReceipt[] // comprobantes que apuntan a este mensaje (opcional)

  @@index([conversationId, timestamp])
  @@index([empresaId, conversationId, timestamp])
  @@index([mediaId])
  @@index([empresaId, externalId])
  @@map("message")
}

model Conversation {
  id        Int                @id @default(autoincrement())
  phone     String
  nombre    String?
  estado    ConversationEstado @default(pendiente)
  mensajes  Message[]
  createdAt DateTime           @default(now())

  empresaId Int
  empresa   Empresa @relation(fields: [empresaId], references: [id])

  orders            Order[] // pedidos creados desde esta conversaci√≥n
  Appointment       Appointment[]
  ConversationState ConversationState?

  // üîé √çndices √∫tiles para dashboard/IA
  @@index([empresaId, estado, createdAt])
  @@index([empresaId, phone])
  @@map("conversation")
}

model BusinessConfig {
  id           Int          @id @default(autoincrement())
  empresaId    Int          @unique
  nombre       String       @default("")
  // üîΩ Campos de texto opcionales
  descripcion  String?      @db.Text
  servicios    String?      @db.Text
  faq          String?      @db.Text
  horarios     String?      @db.Text
  businessType BusinessType @default(servicios)
  disclaimers  String?      @db.Text

  // ===== Operaci√≥n del negocio
  enviosInfo           String? @db.Text
  metodosPago          String? @db.Text
  tiendaFisica         Boolean @default(false)
  direccionTienda      String  @default("")
  politicasDevolucion  String? @db.Text
  politicasGarantia    String? @db.Text
  promocionesInfo      String? @db.Text
  canalesAtencion      String? @db.Text
  extras               String? @db.Text
  palabrasClaveNegocio String  @default("")

  // ===== Perfil de IA (personalizado)
  aiMode           AiMode?
  agentSpecialty   AgentSpecialty @default(generico)
  agentPrompt      String?        @db.Text
  agentScope       String?        @db.Text
  agentDisclaimers String?        @db.Text

  // ===== Pagos (link OPCIONAL + transferencia)
  pagoLinkGenerico     String  @default("")
  pagoLinkProductoBase String  @default("")
  pagoNotas            String? @db.Text

  bancoNombre        String @default("")
  bancoTitular       String @default("")
  bancoTipoCuenta    String @default("")
  bancoNumeroCuenta  String @default("")
  bancoDocumento     String @default("")
  transferenciaQRUrl String @default("")

  // ===== Env√≠os
  envioTipo            String   @default("")
  envioEntregaEstimado String   @default("")
  envioCostoFijo       Decimal?
  envioGratisDesde     Decimal?

  // ===== Post-venta
  facturaElectronicaInfo  String @default("")
  soporteDevolucionesInfo String @default("")

  // Escalamiento
  escalarSiNoConfia    Boolean @default(true)
  escalarPalabrasClave String  @default("")
  escalarPorReintentos Int     @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // ===== Agenda / Citas
  appointmentEnabled   Boolean             @default(false)
  appointmentVertical  AppointmentVertical @default(none)
  appointmentTimezone  String              @default("America/Bogota")
  appointmentBufferMin Int                 @default(10)
  // appointmentWorkHours Json?  // ‚ùå eliminado para evitar doble fuente
  appointmentPolicies  String?             @db.Text
  appointmentReminders Boolean             @default(true)

  Empresa Empresa @relation(fields: [empresaId], references: [id], onDelete: Cascade)

  @@map("businessconfig")
}

model WhatsappAccount {
  id                 Int      @id @default(autoincrement())
  phoneNumberId      String   @unique @db.VarChar(64)
  wabaId             String   @db.VarChar(64)
  businessId         String?  @db.VarChar(64)
  accessToken        String   @db.Text
  displayPhoneNumber String?  @db.VarChar(32)
  empresaId          Int      @unique
  empresa            Empresa  @relation(fields: [empresaId], references: [id])
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  @@index([wabaId])
  @@map("whatsappaccount")
}

model MessageTemplate {
  id        Int      @id @default(autoincrement())
  nombre    String   @db.VarChar(100)
  idioma    String   @db.VarChar(10)
  categoria String   @db.VarChar(50)
  cuerpo    String   @db.Text
  estado    String   @default("pendiente")
  variables Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  empresaId    Int
  empresa      Empresa        @relation(fields: [empresaId], references: [id])
  ReminderRule ReminderRule[]

  @@unique([empresaId, nombre, idioma])
  @@map("messagetemplate")
}

model Product {
  id              Int      @id @default(autoincrement())
  empresaId       Int
  slug            String   @unique
  nombre          String
  descripcion     String   @default("")
  beneficios      String   @default("") // bullets \n
  caracteristicas String   @default("") // bullets \n
  precioDesde     Decimal?
  disponible      Boolean  @default(true)
  updatedAt       DateTime @updatedAt
  createdAt       DateTime @default(now())

  imagenes  ProductImage[]
  empresa   Empresa        @relation(fields: [empresaId], references: [id])
  OrderItem OrderItem[]

  @@index([empresaId, nombre])
  @@map("product")
}

model ProductImage {
  id        Int @id @default(autoincrement())
  productId Int

  imageId   String          @db.VarChar(128)
  url       String          @default("") @db.VarChar(2048)
  alt       String          @default("")
  provider  StorageProvider @default(external)
  isPrimary Boolean         @default(false)
  sortOrder Int             @default(0)

  objectKey       String?   @db.VarChar(255)
  mimeType        String?   @db.VarChar(64)
  sizeBytes       Int?
  width           Int?
  height          Int?
  whatsappMediaId String?   @db.VarChar(128)
  mediaCachedAt   DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
  @@index([provider, objectKey])
  @@index([whatsappMediaId])
  @@map("productimage")
}

/**
 * ========== Pedidos & Pagos ==========
 */
model Order {
  id             Int     @id @default(autoincrement())
  empresaId      Int
  conversationId Int
  customerPhone  String
  customerName   String?
  city           String?
  address        String?
  status         String  @default("pending") // pending|paid|shipped|delivered|canceled
  subtotal       Decimal @default(0)
  shippingCost   Decimal @default(0)
  total          Decimal @default(0)
  notes          String  @db.Text // TEXT sin default

  items    OrderItem[]
  payments PaymentReceipt[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  empresa      Empresa      @relation(fields: [empresaId], references: [id])
  Conversation Conversation @relation(fields: [conversationId], references: [id])

  @@index([empresaId, conversationId, status])
  @@map("order")
}

model OrderItem {
  id        Int     @id @default(autoincrement())
  orderId   Int
  productId Int
  name      String
  price     Decimal @default(0)
  qty       Int     @default(1)
  total     Decimal @default(0)

  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@map("orderitem")
}

model PaymentReceipt {
  id         Int       @id @default(autoincrement())
  orderId    Int
  messageId  Int? // WhatsApp Message.id que trajo la imagen (opcional)
  imageUrl   String    @default("")
  amount     Decimal?
  reference  String    @default("")
  method     String    @default("") // link|transfer|qr
  isVerified Boolean   @default(false)
  verifiedAt DateTime?
  rawOcrText String    @db.Text // TEXT sin default

  order   Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  message Message? @relation(fields: [messageId], references: [id])

  createdAt DateTime @default(now())

  @@index([orderId, isVerified])
  @@map("paymentreceipt")
}

model Appointment {
  id             Int               @id @default(autoincrement())
  empresaId      Int
  conversationId Int?
  source         AppointmentSource @default(client)
  status         AppointmentStatus @default(pending)

  customerName        String
  customerPhone       String
  serviceName         String
  notas               String? @db.Text
  customerDisplayName String?
  serviceDurationMin  Int?
  locationNameCache   String?

  startAt  DateTime
  endAt    DateTime
  timezone String   @default("America/Bogota")

  procedureId       Int?
  EsteticaProcedure EsteticaProcedure? @relation(name: "ProcedureToAppointments", fields: [procedureId], references: [id])

  // ‚úÖ NUEVO: staff asignado (opcional)
  staffId Int?
  staff   Staff? @relation(fields: [staffId], references: [id])

  empresa      Empresa       @relation(fields: [empresaId], references: [id])
  conversation Conversation? @relation(fields: [conversationId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  /// üëá Soft delete
  deletedAt DateTime?

  AppointmentReminderLog AppointmentReminderLog[]

  @@index([empresaId, startAt, endAt])
  @@index([empresaId, status, startAt])
  @@index([conversationId])
  @@index([empresaId, customerPhone, startAt])
  @@index([empresaId, status, startAt, customerPhone])
  @@index([deletedAt])
  @@index([empresaId, deletedAt, startAt])
  @@index([empresaId, staffId]) // ‚úÖ √∫til para consultas por recurso
  @@map("appointment")
}

model AppointmentHour {
  id        Int     @id @default(autoincrement())
  empresaId Int
  day       Weekday
  isOpen    Boolean @default(false)

  // Horas en formato "HH:MM" (24h)
  start1 String? @db.VarChar(5)
  end1   String? @db.VarChar(5)
  start2 String? @db.VarChar(5)
  end2   String? @db.VarChar(5)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  empresa Empresa @relation(fields: [empresaId], references: [id], onDelete: Cascade)

  @@unique([empresaId, day])
  @@index([empresaId, day])
  @@map("appointmenthour")
}

/// Estetica Base de Datos//

model BusinessConfigAppt {
  id        Int     @id @default(autoincrement())
  empresaId Int     @unique
  aiMode    AiMode? // 'appointments' recomendado cuando se habilite

  // ===== Flags y par√°metros base de agenda
  appointmentEnabled        Boolean             @default(false)
  appointmentVertical       AppointmentVertical @default(custom)
  appointmentVerticalCustom String? // texto libre cuando vertical = custom
  appointmentTimezone       String              @default("America/Bogota")
  appointmentBufferMin      Int                 @default(10)
  appointmentPolicies       String?             @db.Text
  appointmentReminders      Boolean             @default(true)

  // ===== NUEVO: reglas operativas claras para IA/booking
  appointmentMinNoticeHours Int?
  appointmentMaxAdvanceDays Int?
  allowSameDayBooking       Boolean @default(false)
  requireClientConfirmation Boolean @default(true)
  cancellationAllowedHours  Int?
  rescheduleAllowedHours    Int?
  defaultServiceDurationMin Int?

  // ===== Servicios
  servicesText String? @db.Text // textarea libre (1 x l√≠nea / comas)
  services     Json? // ["Limpieza", "Blanqueamiento", ...] (legacy)

  // ===== Log√≠stica / ubicaci√≥n (opcional)
  locationName        String?
  locationAddress     String?
  locationMapsUrl     String?
  parkingInfo         String? @db.Text
  virtualMeetingLink  String?
  instructionsArrival String? @db.Text

  // ===== Reglas operativas (opcional)
  cancellationWindowHours Int?
  noShowPolicy            String?  @db.Text
  depositRequired         Boolean  @default(false)
  depositAmount           Decimal? @db.Decimal(10, 2)
  maxDailyAppointments    Int?
  bookingWindowDays       Int?
  blackoutDates           Json?
  overlapStrategy         String? // "strict" | "flexible" (manejado en app)

  // ===== Recordatorios / comunicaciones (opcional)
  reminderSchedule       Json? // [{offsetHours:24, channel:"whatsapp"}, ...] (legacy)
  reminderTemplateId     String?
  postBookingMessage     String? @db.Text
  prepInstructionsPerSvc Json? // {"Limpieza facial":"Llegar 10 min antes", ...}

  // ===== NUEVO: banderas de consentimiento/compliance
  requireWhatsappOptIn Boolean @default(true)
  allowSensitiveTopics Boolean @default(false)
  minClientAge         Int?

  // ===== Knowledge Base (estructura + libre)
  kbBusinessOverview String? @db.Text
  kbFAQs             Json? // [{q:"", a:""}, ...]
  kbServiceNotes     Json? // {"Servicio":"Notas..."}
  kbEscalationRules  Json?
  kbDisclaimers      String? @db.Text
  kbMedia            Json? // links a PDFs/imagenes
  kbFreeText         String? @db.Text

  // ===== Relaciones nuevas (conveniencia)
  EsteticaProcedure EsteticaProcedure[]
  ReminderRule      ReminderRule[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Empresa Empresa @relation(fields: [empresaId], references: [id], onDelete: Cascade)

  @@map("businessconfig_appt")
}

/**
 * ========== Nuevos modelos para Est√©tica ==========
 */

/// Cat√°logo de procedimientos habilitados por empresa (normalizado)
model EsteticaProcedure {
  id           Int     @id @default(autoincrement())
  empresaId    Int
  configApptId Int
  name         String
  enabled      Boolean @default(true)

  aliases            Json?
  durationMin        Int?
  requiresAssessment Boolean  @default(false)
  priceMin           Decimal? @db.Decimal(10, 2)
  priceMax           Decimal? @db.Decimal(10, 2)
  depositRequired    Boolean  @default(false)
  depositAmount      Decimal? @db.Decimal(10, 2)

  prepInstructions  String? @db.Text
  postCare          String? @db.Text
  contraindications String? @db.Text
  notes             String? @db.Text
  pageUrl           String?

  // NUEVO: staff requerido (IDs v√°lidos de Staff)
  requiredStaffIds Json?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // üîΩ relaciones en min√∫scula
  empresa            Empresa            @relation(fields: [empresaId], references: [id], onDelete: Cascade)
  businessConfigAppt BusinessConfigAppt @relation(fields: [configApptId], references: [id], onDelete: Cascade)

  Appointment Appointment[] @relation(name: "ProcedureToAppointments")

  @@index([empresaId])
  @@index([configApptId])
  @@map("estetica_procedure")
}

/// Reglas de recordatorio ligadas a MessageTemplate (WABA)
model ReminderRule {
  id           Int     @id @default(autoincrement())
  empresaId    Int
  configApptId Int
  active       Boolean @default(true)
  offsetHours  Int     @default(24) // horas antes de la cita

  // v√≠nculo fuerte a plantilla WABA existente
  messageTemplateId Int
  templateName      String
  templateLang      String @default("es")
  templateParams    Json?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // üîΩ relaciones en min√∫scula
  empresa            Empresa            @relation(fields: [empresaId], references: [id], onDelete: Cascade)
  businessConfigAppt BusinessConfigAppt @relation(fields: [configApptId], references: [id], onDelete: Cascade)
  messageTemplate    MessageTemplate    @relation(fields: [messageTemplateId], references: [id], onDelete: Restrict)

  appointmentReminderLogs AppointmentReminderLog[]

  @@index([empresaId])
  @@index([configApptId])
  @@index([messageTemplateId])
  @@map("reminder_rule")
}

/// Log de env√≠os de recordatorio (auditor√≠a y reintentos)
model AppointmentReminderLog {
  id             Int      @id @default(autoincrement())
  appointmentId  Int
  reminderRuleId Int?
  sentAt         DateTime @default(now())
  channel        String   @default("whatsapp")
  status         String   @default("sent") // sent|failed|queued
  error          String?  @db.Text

  appointment  Appointment   @relation(fields: [appointmentId], references: [id], onDelete: Cascade)
  reminderRule ReminderRule? @relation(fields: [reminderRuleId], references: [id])

  @@index([appointmentId])
  @@index([reminderRuleId])
  @@map("appointment_reminder_log")
}

/**
 * ========== NUEVO: Recursos y Excepciones ==========
 */

model Staff {
  id           Int       @id @default(autoincrement())
  empresaId    Int
  name         String
  role         StaffRole @default(esteticista)
  active       Boolean   @default(true)
  availability Json? // [{weekday:1,start:"09:00",end:"13:00"}]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  empresa Empresa @relation(fields: [empresaId], references: [id], onDelete: Cascade)

  // ‚úÖ Relaci√≥n inversa (opcional pero √∫til)
  appointments Appointment[]

  @@index([empresaId])
  @@map("staff")
}

model AppointmentException {
  id        Int      @id @default(autoincrement())
  empresaId Int
  date      DateTime
  reason    String?

  // NUEVO (opcionales)
  isOpen Boolean? @default(true)
  start1 String?  @db.VarChar(5) // "09:00"
  end1   String?  @db.VarChar(5)
  start2 String?  @db.VarChar(5)
  end2   String?  @db.VarChar(5)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  empresa   Empresa  @relation(fields: [empresaId], references: [id], onDelete: Cascade)

  @@index([empresaId, date])
  @@map("appointment_exception")
}

model ConversationState {
  id             Int      @id @default(autoincrement())
  conversationId Int      @unique
  data           Json
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@index([updatedAt])
  @@map("conversation_state")
}
