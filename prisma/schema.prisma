generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Enums
enum ConversationEstado {
  pendiente
  respondido
  en_proceso
  requiere_agente
  cerrado
}

enum MessageFrom {
  client
  bot
  agent
}

enum Rol {
  admin
  agente
  invitado
}

enum Plan {
  gratis
  pro
}

enum Estado {
  inactivo
  activo
  suspendido
}

model Usuario {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  rol       Rol
  empresaId Int
  empresa   Empresa  @relation(fields: [empresaId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("usuario")
}

model Empresa {
  id     Int    @id @default(autoincrement())
  nombre String
  plan   Plan   @default(gratis)
  estado Estado @default(inactivo)

  // âœ… Control de prueba gratuita
  trialStart        DateTime?
  trialEnd          DateTime?
  conversationsUsed Int       @default(0)

  usuarios         Usuario[]
  configuraciones  BusinessConfig[]
  conversaciones   Conversation[]
  cuentaWhatsapp   WhatsappAccount?
  messageTemplates MessageTemplate[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("empresa")
}

model Message {
  id             Int         @id @default(autoincrement())
  conversationId Int
  from           MessageFrom
  contenido      String      @db.Text
  timestamp      DateTime    @default(now())

  Conversation Conversation @relation(fields: [conversationId], references: [id])

  @@index([conversationId, timestamp])
  @@map("message")
}

model Conversation {
  id        Int                @id @default(autoincrement())
  phone     String
  nombre    String?
  estado    ConversationEstado @default(pendiente)
  mensajes  Message[]
  createdAt DateTime           @default(now())

  empresaId Int
  empresa   Empresa @relation(fields: [empresaId], references: [id])

  @@map("conversation")
}

model BusinessConfig {
  id                   Int      @id @default(autoincrement())
  nombre               String   @db.VarChar(100)
  descripcion          String   @db.Text
  servicios            String   @db.Text
  faq                  String   @db.Text
  horarios             String   @db.Text
  escalarSiNoConfia    Boolean
  escalarPalabrasClave String   @db.Text
  escalarPorReintentos Int
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  empresaId Int
  empresa   Empresa @relation(fields: [empresaId], references: [id])

  @@map("businessconfig")
}

model WhatsappAccount {
  id                 Int      @id @default(autoincrement())
  phoneNumberId      String   @unique @db.VarChar(64)
  wabaId             String   @db.VarChar(64)
  businessId         String?  @db.VarChar(64)
  accessToken        String   @db.Text
  displayPhoneNumber String?  @db.VarChar(32)
  empresaId          Int      @unique
  empresa            Empresa  @relation(fields: [empresaId], references: [id])
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  @@index([wabaId])
  @@map("whatsappaccount")
}

model MessageTemplate {
  id        Int      @id @default(autoincrement())
  nombre    String   @db.VarChar(100)
  idioma    String   @db.VarChar(10)
  categoria String   @db.VarChar(50)
  cuerpo    String   @db.Text
  estado    String   @default("pendiente")
  variables Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  empresaId Int
  empresa   Empresa @relation(fields: [empresaId], references: [id])

  @@map("messagetemplate")
}
