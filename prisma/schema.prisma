generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Enums
enum ConversationEstado {
  pendiente
  respondido
  en_proceso
  requiere_agente
  cerrado
}

enum MessageFrom {
  client
  bot
  agent
}

enum Rol {
  admin
  agente
  invitado
}

enum Plan {
  gratis
  pro
}

enum Estado {
  inactivo
  activo
  suspendido
}

enum MediaType {
  image
  video
  audio
  document
}

enum BusinessType {
  servicios
  productos
}

model Usuario {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  rol       Rol
  empresaId Int
  empresa   Empresa  @relation(fields: [empresaId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("usuario")
}

model Empresa {
  id     Int    @id @default(autoincrement())
  nombre String
  plan   Plan   @default(gratis)
  estado Estado @default(inactivo)

  trialStart        DateTime?
  trialEnd          DateTime?
  conversationsUsed Int       @default(0)

  usuarios Usuario[]

  configuracion    BusinessConfig?
  conversaciones   Conversation[]
  cuentaWhatsapp   WhatsappAccount?
  messageTemplates MessageTemplate[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Message   Message[]
  Product   Product[]

  @@map("empresa")
}

model Message {
  id             Int         @id @default(autoincrement())
  conversationId Int
  from           MessageFrom
  contenido      String      @db.Text
  timestamp      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt

  // Cloud API
  externalId String?    @unique // wamid de Meta (MySQL permite varios NULL)
  mediaType  MediaType?
  mediaId    String?    @db.VarChar(128) // id devuelto por /media
  mediaUrl   String?    @db.Text // si lo env√≠as por link o cacheas el presigned
  mimeType   String?    @db.VarChar(64)
  caption    String?    @db.Text

  // üîä Notas de voz
  isVoiceNote   Boolean? @default(false) // true si msg.audio.voice === true
  durationSec   Int? // opcional, si lo calculas despu√©s
  transcription String?  @db.Text // texto transcrito (Whisper / 4o-mini-transcribe)

  empresaId Int
  empresa   Empresa @relation(fields: [empresaId], references: [id])

  Conversation Conversation @relation(fields: [conversationId], references: [id])

  @@index([conversationId, timestamp])
  @@index([empresaId, conversationId, timestamp])
  @@index([mediaId])
  @@index([empresaId, externalId])
  @@map("message")
}

model Conversation {
  id        Int                @id @default(autoincrement())
  phone     String
  nombre    String?
  estado    ConversationEstado @default(pendiente)
  mensajes  Message[]
  createdAt DateTime           @default(now())

  empresaId Int
  empresa   Empresa @relation(fields: [empresaId], references: [id])

  @@map("conversation")
}

model BusinessConfig {
  id           Int          @id @default(autoincrement())
  empresaId    Int          @unique
  nombre       String       @default("")
  descripcion  String       @default("")
  servicios    String       @default("") // tambi√©n sirve para listar productos
  faq          String       @default("")
  horarios     String       @default("")
  businessType BusinessType @default(servicios)
  disclaimers  String       @default("")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Empresa Empresa @relation(fields: [empresaId], references: [id], onDelete: Cascade)
}

model WhatsappAccount {
  id                 Int      @id @default(autoincrement())
  phoneNumberId      String   @unique @db.VarChar(64)
  wabaId             String   @db.VarChar(64)
  businessId         String?  @db.VarChar(64)
  accessToken        String   @db.Text
  displayPhoneNumber String?  @db.VarChar(32)
  empresaId          Int      @unique
  empresa            Empresa  @relation(fields: [empresaId], references: [id])
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  @@index([wabaId])
  @@map("whatsappaccount")
}

model MessageTemplate {
  id        Int      @id @default(autoincrement())
  nombre    String   @db.VarChar(100)
  idioma    String   @db.VarChar(10)
  categoria String   @db.VarChar(50)
  cuerpo    String   @db.Text
  estado    String   @default("pendiente")
  variables Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  empresaId Int
  empresa   Empresa @relation(fields: [empresaId], references: [id])

  @@unique([empresaId, nombre, idioma]) // ‚Üê necesario para upsert (sync con Meta)
  @@map("messagetemplate")
}

model Product {
  id              Int      @id @default(autoincrement())
  empresaId       Int
  slug            String   @unique
  nombre          String
  descripcion     String   @default("")
  beneficios      String   @default("") // bullets \n separados
  caracteristicas String   @default("") // bullets \n
  precioDesde     Decimal? // opcional (si no quieres que la IA diga precios, d√©jalo null)
  disponible      Boolean  @default(true)
  updatedAt       DateTime @updatedAt
  createdAt       DateTime @default(now())

  imagenes ProductImage[]
  empresa  Empresa        @relation(fields: [empresaId], references: [id])

  @@index([empresaId, nombre])
}

model ProductImage {
  id        Int    @id @default(autoincrement())
  productId Int
  url       String // Cloudinary o URL p√∫blica
  alt       String @default("")

  product Product @relation(fields: [productId], references: [id])
}
